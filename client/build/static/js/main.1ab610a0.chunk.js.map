{"version":3,"sources":["GlobalStyle.js","ImageTile.js","ImageContainer.js","Search.js","StyledLink.js","ToggleWrapper.js","Button.js","ControlPanel.js","Caption.js","Layout.js","ImageView.js","Title.js","SearchBar.js","Header.js","App.js","reportWebVitals.js","index.js"],"names":["GlobalStyle","createGlobalStyle","StyledImage","styled","img","ImageTile","props","data","to","episode","screenshot_key","src","url","StyledContainer","div","ImageContainer","imagesArr","images","map","image","Search","searching","results","StyledLink","Link","ToggleWrapper","Button","button","StyledDiv","ControlPanel","captionDisplay","setCaptionDisplay","captionFont","setCaptionFont","handleSubmit","checked","onChange","labelLeft","style","width","onClick","Caption","p","font","display","Grid","Row","Col","ImgCol","ImageViewSection","section","ImageView","useState","currentImage","setCurrentImage","relatedImages","setRelatedImages","location","useLocation","useEffect","console","log","fetch","window","pathname","mode","headers","then","res","json","filter","datum","parseInt","split","catch","error","icon","faChevronLeft","id","alt","text","contentEditable","filename","timestamp","Math","floor","random","toJpeg","document","getElementById","quality","dataUrl","link","createElement","download","href","click","Title","setResults","setQuery","textDecoration","StyledInput","input","SearchBar","query","setSearching","history","useHistory","URL","searchParams","set","pushState","length","delete","querySelector","value","e","replace","target","type","placeholder","StyledHeader","header","Header","className","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1ab610a0.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n    body {\n        background-color: #282c34;\n    }\n    h1 {\n        color: white;\n        text-decoration: none;\n        font-size: 1.5em;\n        font-family: 'Cooper Black';\n    }\n`;\n\nexport default GlobalStyle;\n","/* eslint-disable react/jsx-filename-extension */\nimport { React } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nconst StyledImage = styled.img`\n    width: 100%;\n    max-height: 100%;\n\n`;\n\nfunction ImageTile(props) {\n  const { data } = props;\n  return (\n    <Link to={`/screenshots/${data.episode}/${data.screenshot_key}`}>\n      <StyledImage src={data.url} />\n    </Link>\n  );\n}\nImageTile.propTypes = {\n  data: PropTypes.shape.isRequired,\n};\n\nexport default ImageTile;\n","/* eslint-disable react/jsx-filename-extension */\nimport { React } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport ImageTile from './ImageTile';\n\nconst StyledContainer = styled.div`\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    gap: 1em;\n    max-width: 90%;\n    margin: 1em auto;\n    @media only screen and (min-width: 768px) {\n        grid-template-columns: repeat(4, 1fr)\n    }\n`;\n\nfunction ImageContainer(props) {\n  const { images } = props;\n  const imagesArr = images.map((image) => <ImageTile data={image} />);\n\n  return (\n    <StyledContainer>\n      {imagesArr}\n    </StyledContainer>\n\n  );\n}\nImageContainer.propTypes = {\n  images: PropTypes.arrayOf.isRequired,\n};\n\nexport default ImageContainer;\n","/* eslint-disable react/jsx-filename-extension */\nimport { React } from 'react';\nimport PropTypes from 'prop-types';\nimport ImageContainer from './ImageContainer';\n\nfunction Search(props) {\n  const { searching, results } = props;\n  return (\n    searching\n      ? <h1>Loading...</h1>\n      : <ImageContainer images={results} />\n  );\n}\nSearch.propTypes = {\n  searching: PropTypes.bool.isRequired,\n  results: PropTypes.arrayOf.isRequired,\n};\n\nexport default Search;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nconst StyledLink = styled(Link)`\n    color: white;\n    text-decoration: none;\n    font-family: 'Cooper Black';\n    font-size: 1.3em;\n    margin: 1em;\n    -webkit-text-stroke: 1px black;\n    :hover {\n        text-shadow: -2px 2px 0px black;\n    }\n`;\n\nexport default StyledLink;\n","import styled from 'styled-components';\n\nconst ToggleWrapper = styled.div`\n    margin: .5em 0;\n    color: white !important;\n`;\n\nexport default ToggleWrapper;\n","import styled from 'styled-components';\n\nconst Button = styled.button`\n    font-family: 'Cooper Black';\n    font-size: 2em;\n    background: transparent;\n    margin: 1em;\n    border: none;\n    color: white;\n    cursor: pointer;\n    -webkit-text-stroke: 1px black;\n    :hover {\n        text-shadow: -4px 4px 0px black;\n    }\n`;\n\nexport default Button;\n","/* eslint-disable react/jsx-filename-extension */\nimport { React } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Toggle from 'react-styled-toggle';\nimport ToggleWrapper from './ToggleWrapper';\nimport Button from './Button';\n\nconst StyledDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: flex-end;\n    padding: 2em;\n    box-sizing: border-box;\n`;\n\nfunction ControlPanel(props) {\n  const {\n    captionDisplay, setCaptionDisplay, captionFont, setCaptionFont, handleSubmit,\n  } = props;\n  return (\n    <StyledDiv>\n      <div>\n        <ToggleWrapper>\n          <Toggle\n            checked={captionDisplay === 'block'}\n            onChange={() => setCaptionDisplay(captionDisplay === 'block' ? 'none' : 'block')}\n            labelLeft=\"Show caption\"\n          />\n        </ToggleWrapper>\n      </div>\n      <div>\n        { captionDisplay === 'block'\n            && (\n            <ToggleWrapper>\n              <Toggle\n                checked={captionFont === 'Cooper Black'}\n                onChange={() => setCaptionFont(captionFont === 'Cooper Black' ? 'Arial Black' : 'Cooper Black')}\n                labelLeft=\"Fancy font\"\n              />\n            </ToggleWrapper>\n            )}\n      </div>\n      <div style={{ width: '100%' }}>\n        <Button onClick={() => handleSubmit()}>Download</Button>\n      </div>\n    </StyledDiv>\n  );\n}\nControlPanel.propTypes = {\n  captionDisplay: PropTypes.string.isRequired,\n  setCaptionDisplay: PropTypes.func.isRequired,\n  captionFont: PropTypes.string.isRequired,\n  setCaptionFont: PropTypes.func.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n};\n\nexport default ControlPanel;\n","import styled from 'styled-components';\n\nconst Caption = styled.p`\n    color: white;\n    font-size: 1.4em;\n    position: absolute;\n    margin: 0;\n    top: 80%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 100%;\n    font-family: ${(props) => props.font};\n    -webkit-text-stroke: 1px black;\n    display: ${(props) => props.display};\n    @media only screen and (min-width: 830px) {\n        font-size: 1.8em;\n    }\n`;\n\nexport default Caption;\n","import styled from 'styled-components';\n\nexport const Grid = styled.div`\n    width: 80%;\n    margin: auto;\n    @media only screen and (min-width: 830px) {\n        width: 90%;\n    }\n`;\n\nexport const Row = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    @media only screen and (min-width: 830px) {\n        flex-direction: row;\n    }\n`;\n\nexport const Col = styled.div`\n    width: 100%;\n    overflow: hidden;\n    @media only screen and (min-width: 830px) {\n        min-width: 50%;\n    }\n`;\n\nexport const ImgCol = styled(Col)`\n    position: relative;\n    text-align: center;\n`;\n","/* eslint-disable react/jsx-filename-extension */\nimport { React, useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { toJpeg } from 'html-to-image';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronLeft } from '@fortawesome/free-solid-svg-icons';\nimport StyledLink from './StyledLink';\nimport ImageContainer from './ImageContainer';\nimport ControlPanel from './ControlPanel';\nimport Caption from './Caption';\nimport {\n  Grid, Row, ImgCol,\n} from './Layout';\n\nconst ImageViewSection = styled.section`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`;\n\nfunction ImageView() {\n  const [currentImage, setCurrentImage] = useState({});\n  const [relatedImages, setRelatedImages] = useState([]);\n  const [captionDisplay, setCaptionDisplay] = useState('block');\n  const [captionFont, setCaptionFont] = useState('Cooper Black');\n  const location = useLocation();\n  // on page load, calls API and gets page data\n  useEffect(() => {\n    console.log('fetching!');\n    fetch(`http://localhost:9000${window.location.pathname}`, {\n      mode: 'cors',\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        // sets current image based on api response\n        setCurrentImage(data.filter((datum) => datum.screenshot_key === parseInt(window.location.pathname.split('/')[3], 10))[0]);\n        // sets related images\n        setRelatedImages(data.filter((datum) => datum.screenshot_key !== parseInt(window.location.pathname.split('/')[3], 10)));\n      })\n      .catch((error) => console.log(`Error: ${error}`));\n  }, [location]);\n  function handleSubmit() {\n    // saves image as jpeg\n    const filename = `ITYSM-${currentImage.timestamp}-${Math.floor(Math.random() * 10000)}`;\n    toJpeg(document.getElementById('target-image'), { quality: 0.95 })\n      .then((dataUrl) => {\n        const link = document.createElement('a');\n        link.download = `${filename}.jpeg`;\n        link.href = dataUrl;\n        link.click();\n      });\n  }\n  return (\n    <ImageViewSection>\n      <StyledLink to=\"/\">\n        <FontAwesomeIcon icon={faChevronLeft} />\n        {' '}\n        Back to search\n      </StyledLink>\n      <Grid>\n        <Row>\n          <ImgCol id=\"target-image\">\n            <img src={currentImage.url} alt={currentImage.text} style={{ width: '100%' }} />\n            <Caption\n              display={captionDisplay}\n              font={captionFont}\n              contentEditable\n            >\n              {currentImage.text}\n            </Caption>\n          </ImgCol>\n          <ControlPanel\n            captionDisplay={captionDisplay}\n            setCaptionDisplay={setCaptionDisplay}\n            captionFont={captionFont}\n            setCaptionFont={setCaptionFont}\n            handleSubmit={handleSubmit}\n          />\n        </Row>\n      </Grid>\n      <ImageContainer images={relatedImages} />\n    </ImageViewSection>\n  );\n}\n\nexport default ImageView;\n","/* eslint-disable react/jsx-filename-extension */\nimport { React } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nfunction Title(props) {\n  const { setResults, setQuery } = props;\n  function handleClick() {\n    setResults([]);\n    setQuery(null);\n  }\n  return (\n    <Link style={{ textDecoration: 'none' }} onClick={handleClick} to=\"/\">\n      <h1>I Think You Should Meme</h1>\n    </Link>\n  );\n}\nTitle.propTypes = {\n  setResults: PropTypes.func.isRequired,\n  setQuery: PropTypes.func.isRequired,\n};\n\nexport default Title;\n","/* eslint-disable react/jsx-filename-extension */\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { useLocation, useHistory } from 'react-router-dom';\n\nconst StyledInput = styled.input`\nborder-radius: 50px;\nheight: 2em;\nwidth: 80%;\nmargin: .75em;\npadding: .5em 2em;\nborder: none;\n`;\n\nfunction SearchBar(props) {\n  const {\n    query, setQuery, setResults, setSearching,\n  } = props;\n  const location = useLocation();\n  const history = useHistory();\n  useEffect(() => {\n    const url = new URL(window.location);\n    url.searchParams.set('q', query);\n    // updates url query param based on search term\n    if (query !== null && location.pathname === '/') {\n      window.history.pushState({}, '', url);\n      // fetches search results from API\n      if (query.length > 2) {\n        setSearching(true);\n        fetch(`http://localhost:9000/search?${url.searchParams}`, {\n          mode: 'cors',\n          headers: {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*',\n            // 'Content-Type': 'application/x-www-form-urlencoded',\n          },\n        })\n          .then((res) => res.json())\n          .then((data) => {\n            setResults(data);\n            setSearching(false);\n          })\n          .catch((error) => console.log(error));\n      }\n    } else {\n      // if no search term, remove query string.\n      url.searchParams.delete('q');\n      window.history.pushState({}, '', url);\n      document.querySelector('input[type=\"text\"]').value = '';\n    }\n  }, [query, location]);\n  const onChange = (e) => {\n    // live search, sets query as text in search bar changes\n    history.replace('/');\n    if (e.target.value.length > 0) {\n      setQuery(e.target.value);\n    } else {\n    // if no search term, clear query and results.\n      setQuery(null);\n      setResults([]);\n    }\n  };\n\n  return (\n    <StyledInput\n      onChange={onChange}\n      type=\"text\"\n      placeholder=\"Search by quote (e.g., 'Stanzo brand fedoras,' 'Taffy Lee Fubbins,' 'Shut up, Paul.'\"\n    />\n  );\n}\nSearchBar.propTypes = {\n  query: PropTypes.string.isRequired,\n  setQuery: PropTypes.func.isRequired,\n  setResults: PropTypes.func.isRequired,\n  setSearching: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","/* eslint-disable react/jsx-filename-extension */\nimport { React, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Title from './Title';\nimport SearchBar from './SearchBar';\n\nconst StyledHeader = styled.header`\n    background-color: #282c34;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px + 2vmin);\n    color: white;\n    box-sizing: border-box;\n    @media only screen and (min-width: 768px) {\n        flex-direction: row;\n        padding: 1em;\n    }\n`;\n\nfunction Header(props) {\n  const [query, setQuery] = useState(null);\n  const { setResults, setSearching } = props;\n  return (\n    <StyledHeader className=\"App-header\">\n      <Title setResults={setResults} setQuery={setQuery} query={query} />\n      <SearchBar\n        history={window.history}\n        setResults={setResults}\n        query={query}\n        setQuery={setQuery}\n        setSearching={setSearching}\n      />\n    </StyledHeader>\n  );\n}\nHeader.propTypes = {\n  setResults: PropTypes.func.isRequired,\n  setSearching: PropTypes.func.isRequired,\n};\n\nexport default Header;\n","/* eslint-disable react/jsx-filename-extension */\nimport './App.css';\nimport React, { useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport GlobalStyle from './GlobalStyle';\nimport Search from './Search';\nimport ImageView from './ImageView';\nimport Header from './Header';\n\nfunction App() {\n  const [results, setResults] = useState([]);\n  const [searching, setSearching] = useState(false);\n  return (\n    <Router>\n      <GlobalStyle />\n      <div className=\"App\">\n        <Header setResults={setResults} setSearching={setSearching} />\n        <Switch>\n          <Route path=\"/screenshots/:episode/:timestamp\">\n            <ImageView images={results} />\n          </Route>\n          <Route exact path=\"/\">\n            <Search results={results} searching={searching} />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}